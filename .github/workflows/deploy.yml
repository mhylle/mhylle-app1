name: Deploy App1 to mhylle.com

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  APP_NAME: app1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Dockerfile syntax
      run: |
        docker build --no-cache -f frontend/Dockerfile -t test-frontend . || echo "Frontend Dockerfile needs adjustment"
        docker build --no-cache -f backend/Dockerfile -t test-backend . || echo "Backend Dockerfile needs adjustment"

    - name: Configuration check
      run: |
        echo "‚úÖ Repository structure validated"
        echo "‚úÖ Deployment configuration ready"

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          VERSION="v$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)"
        else
          VERSION="pr-${{ github.event.number }}-$(echo ${{ github.sha }} | cut -c1-7)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build Frontend
    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }}

    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        build-args: |
          BASE_HREF=/app1/
          DEPLOY_URL=/app1/
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build Backend
    - name: Extract backend metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }}

    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to Scaleway
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e
          
          echo "üöÄ Starting deployment of ${{ env.APP_NAME }}..."
          
          # Navigate to infrastructure directory
          cd /home/mhylle/projects/mhylle.com
          
          # Source environment variables
          source .env
          
          # Log deployment start
          echo "üìù Logging deployment..."
          docker exec mhylle-postgres psql -U $POSTGRES_USER -d $POSTGRES_DB -c "
            INSERT INTO deployment_logs (
              app_name, deployment_id, status, frontend_image, backend_image, 
              version, deployed_by, metadata
            ) VALUES (
              '${{ env.APP_NAME }}', 
              'gh-${{ github.run_id }}', 
              'started', 
              '${{ needs.build.outputs.frontend-image }}',
              '${{ needs.build.outputs.backend-image }}',
              '${{ needs.build.outputs.version }}',
              '${{ github.actor }}',
              '{\"github_run_id\": \"${{ github.run_id }}\", \"commit_sha\": \"${{ github.sha }}\"}'
            );
          " || echo "Warning: Failed to log deployment start"
          
          # Run deployment using docker-compose
          FRONTEND_FULL=$(echo "${{ needs.build.outputs.frontend-image }}" | head -n1)
          BACKEND_FULL=$(echo "${{ needs.build.outputs.backend-image }}" | head -n1)
          
          # Extract base image name (remove tag)
          FRONTEND_IMAGE=${FRONTEND_FULL%:*}
          BACKEND_IMAGE=${BACKEND_FULL%:*}
          
          echo "Frontend image: $FRONTEND_IMAGE"
          echo "Backend image: $BACKEND_IMAGE"
          echo "Version: ${{ needs.build.outputs.version }}"
          
          # Navigate to app1 directory
          cd /home/mhylle/projects/mhylle.com/example-app1
          
          # Pull latest application code
          git pull origin main || echo "Git pull failed, continuing with existing code"
          
          # Set environment variables for docker-compose
          export FRONTEND_IMAGE="$FRONTEND_IMAGE"
          export BACKEND_IMAGE="$BACKEND_IMAGE"
          export IMAGE_TAG="${{ needs.build.outputs.version }}"
          
          # Source main environment variables
          source ../infrastructure/.env 2>/dev/null || source ../.env || echo "Warning: .env not found"
          
          # Stop existing containers gracefully
          docker-compose down --remove-orphans || true
          
          # Pull latest images
          docker-compose pull
          
          # Start services
          docker-compose up -d
          
          # Wait for services to be healthy
          echo "‚è≥ Waiting for services to be healthy..."
          timeout 120 bash -c 'until [ "$(docker inspect --format="{{.State.Health.Status}}" app1-backend 2>/dev/null)" = "healthy" ]; do echo "Waiting for backend to be healthy..."; sleep 5; done' || echo "‚ö†Ô∏è Backend health check timeout"
          timeout 60 bash -c 'until [ "$(docker inspect --format="{{.State.Health.Status}}" app1-frontend 2>/dev/null)" = "healthy" ]; do echo "Waiting for frontend to be healthy..."; sleep 5; done' || echo "‚ö†Ô∏è Frontend health check timeout"
          
          # Verify deployment
          if docker ps | grep -q "app1-backend.*Up" && docker ps | grep -q "app1-frontend.*Up"; then
          # Verify deployment
          if docker ps | grep -q "app1-backend.*Up" && docker ps | grep -q "app1-frontend.*Up"; then
            echo "‚úÖ Deployment successful!"
            
            # Log successful deployment
            docker exec mhylle-postgres psql -U $POSTGRES_USER -d $POSTGRES_DB -c "
              UPDATE deployment_logs 
              SET status = 'success', completed_at = NOW() 
              WHERE deployment_id = 'gh-${{ github.run_id }}';
            " || echo "Warning: Failed to log deployment success"
            
          else
            echo "‚ùå Deployment failed!"
            echo "Container status:"
            docker ps | grep app1 || echo "No app1 containers found"
            echo "Recent logs:"
            docker logs app1-backend --tail=20 2>/dev/null || echo "No backend logs"
            docker logs app1-frontend --tail=20 2>/dev/null || echo "No frontend logs"
            
            # Log failed deployment
            docker exec mhylle-postgres psql -U $POSTGRES_USER -d $POSTGRES_DB -c "
              UPDATE deployment_logs 
              SET status = 'failed', completed_at = NOW(), error_message = 'Docker containers not running' 
              WHERE deployment_id = 'gh-${{ github.run_id }}';
            " || echo "Warning: Failed to log deployment failure"
            
            exit 1
          fi

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "üîç Verifying deployment..."
          
          # Wait for services to be ready
          sleep 30
          
          # Check if containers are running
          if docker ps | grep -E "${{ env.APP_NAME }}-(frontend|backend)"; then
            echo "‚úÖ Containers are running"
          else
            echo "‚ùå Containers not found"
            exit 1
          fi
          
          # Test health endpoint
          if curl -f -s "https://mhylle.com/health/${{ env.APP_NAME }}" > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è  Health check failed, but deployment may still be successful"
          fi
          
          # Test main application
          if curl -f -s "https://mhylle.com/${{ env.APP_NAME }}" > /dev/null; then
            echo "‚úÖ Application is accessible"
          else
            echo "‚ö†Ô∏è  Application accessibility test failed"
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "üéâ Deployment successful!"
          echo "Application: https://mhylle.com/${{ env.APP_NAME }}"
          echo "API: https://mhylle.com/api/${{ env.APP_NAME }}"
          echo "Version: ${{ needs.build.outputs.version }}"
        elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
          echo "üí• Deployment failed!"
          echo "Check the deployment logs for details."
          exit 1
        elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
          echo "‚è≠Ô∏è Deployment skipped (not main branch)"
        else
          echo "‚ùì Deployment status unknown: ${{ needs.deploy.result }}"
        fi
