version: '3.8'

services:
  frontend:
    image: ${FRONTEND_IMAGE}:${IMAGE_TAG}
    container_name: app1-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
    networks:
      - mhylle_app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend:
    image: ${BACKEND_IMAGE}:${IMAGE_TAG}
    container_name: app1-backend
    restart: unless-stopped
    ports:
      - "8001:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mhylle-postgres
      - DB_PORT=5432
      - DB_NAME=${APP1_DB_NAME:-mhylle_app1}
      - DB_USER=${APP1_DB_USER:-app1_user}
      - DB_PASSWORD=${APP1_DB_PASSWORD}
      - API_PREFIX=/api/app1
    networks:
      - mhylle_app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres

  postgres:
    image: postgres:15-alpine
    container_name: mhylle-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mhylle_app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  mhylle_app-network:
    external: true

volumes:
  postgres_data:
    external: true
